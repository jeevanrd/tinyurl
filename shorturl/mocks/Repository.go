// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import shorturl "tiny_url/shorturl"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: entry
func (_m *Repository) Create(entry shorturl.UrlEntry) (shorturl.UrlEntry, error) {
	ret := _m.Called(entry)

	var r0 shorturl.UrlEntry
	if rf, ok := ret.Get(0).(func(shorturl.UrlEntry) shorturl.UrlEntry); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Get(0).(shorturl.UrlEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(shorturl.UrlEntry) error); ok {
		r1 = rf(entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLongurl provides a mock function with given fields: longurl
func (_m *Repository) FindByLongurl(longurl string) (shorturl.UrlEntry, error) {
	ret := _m.Called(longurl)

	var r0 shorturl.UrlEntry
	if rf, ok := ret.Get(0).(func(string) shorturl.UrlEntry); ok {
		r0 = rf(longurl)
	} else {
		r0 = ret.Get(0).(shorturl.UrlEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(longurl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: tinyUrl
func (_m *Repository) Get(tinyUrl string) (shorturl.UrlEntry, error) {
	ret := _m.Called(tinyUrl)

	var r0 shorturl.UrlEntry
	if rf, ok := ret.Get(0).(func(string) shorturl.UrlEntry); ok {
		r0 = rf(tinyUrl)
	} else {
		r0 = ret.Get(0).(shorturl.UrlEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tinyUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
